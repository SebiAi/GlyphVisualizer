name: Build for Windows

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-windows:
    permissions:
      contents: 'write'
    runs-on: windows-2022
    steps:
      # Install build dependencies
      - name: Install Qt6.6.0
        uses: jurplel/install-qt-action@v3
        with:
          # See https://ddalcino.github.io/aqt-list-server/
          aqtversion: '==3.1.*'
          version: '6.6.0'
          modules: 'qtmultimedia'
          cache: true
          cache-key-prefix: install-qt-6.6.0-action-${{ runner.os }}
      - name: Setup MSVC 2022 for C++ (Windows)
        # See supported versions here: https://doc.qt.io/qt-6/windows.html
        uses: ilammy/msvc-dev-cmd@v1
      
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
      
      # Build and install TagLib dependency
      - name: Cache TagLib build
        id: cache-taglib
        uses: actions/cache@v4
        with:
          path: taglib
          key: taglib-${{ runner.os }}-${{ hashFiles('.github/workflows/build-windows.yml') }}
      - name: Build TagLib
        if: ${{ steps.cache-taglib.outputs.cache-hit != 'true' }}
        run: |
          git clone --depth 1 --branch v2.0 https://github.com/taglib/taglib.git
          cd taglib
          git submodule update --init
          cmake -G Ninja -DBUILD_SHARED_LIBS=ON -DWITH_ZLIB=OFF -DCMAKE_BUILD_TYPE=Release -S . -B build
          cmake --build build --config Release
          cd ..
      - name: Install TagLib
        run: cmake --install taglib/build
      
      # Update project version
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
      - name: Install semantic-release
        run: npm install
      - name: Update version
        run: python deploy/update_version.py src/APPLICATION_INFO.h
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Save the version as an output
        id: get_version
        run: echo "version=$(cat .version)" >> "$GITHUB_OUTPUT"
        shell: bash
    
      # Build the project
      - name: Build
        # No need to set CMAKE_PREFIX_PATH, because install-qt-action did the work for us
        run: cmake -G Ninja "-DCMAKE_BUILD_TYPE:STRING=Release" -S . -B build && cmake --build build --config Release
      
      # Package with windeployqt + zip
      # TODO: Use NSIS to create an installer (Extract files, silently install vc_redist.x64.exe, create start menu entry, etc.)
      - name: Package with windeployqt and zip
        run: |
          mkdir GlyphVisualizer-$((Get-Content .version))_windows-x64-portable && mv build\GlyphVisualizer.exe GlyphVisualizer-$((Get-Content .version))_windows-x64-portable
          copy taglib/build/taglib/tag.dll GlyphVisualizer-$((Get-Content .version))_windows-x64-portable
          windeployqt --release GlyphVisualizer-$((Get-Content .version))_windows-x64-portable\GlyphVisualizer.exe
          Compress-Archive -Path GlyphVisualizer-$((Get-Content .version))_windows-x64-portable -DestinationPath GlyphVisualizer-$((Get-Content .version))_windows-x64-portable.zip
      
      # Calculate the checksum
      - name: Calculate Checksum
        run: $(CertUtil -hashfile GlyphVisualizer-$((Get-Content .version))_windows-x64-portable.zip SHA256)[1] -replace ' ','' | tee GlyphVisualizer-$((Get-Content .version))_windows-x64-portable.zip.sha256.txt
      
      # Upload the artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: GlyphVisualizer-${{ steps.get_version.outputs.version }}_windows-x64-portable
          path: |
            GlyphVisualizer*_windows-x64-portable.zip
            GlyphVisualizer*_windows-x64-portable.zip.sha256.txt